name: "Jitbit: Blue-Green Deployment"
on:
  workflow_dispatch:
    inputs:
        environment:
          required: true
          type: choice
          options:
            - "sandbox"
            - "development"
            - "test"
            - "preproduction"
            - "production"
        image_tag:
            required: false
            type: string
            default: "latest"
        terraform_version:
            required: false
            type: string
            default: "~1.6"

jobs:
  create-container-plan:
    name: Plan for new container in delius-jitbit ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-delius-operational-automation-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ inputs.terraform_version }}"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform --version
          echo "terraform init -backend-config=environments/${{ inputs.environment }}/backend.hcl"
          terraform init -backend-config=environments/${{ inputs.environment }}/backend.hcl

      - name: Terraform Plan # ensures both blue and green are now running
        id: plan
        working-directory: terraform
        run: |
          set -o pipefail
          exitcode=0
          tfargs="-detailed-exitcode"
          echo "terraform plan -var-file=environments/${{ inputs.environment }}/terraform.tfvars -var="image_tag=${{ inputs.image_tag }}" -var="ecs_switch=true" $tfargs | tee tfplan.txt || exitcode=$?"
          terraform plan -var-file=environments/${{ inputs.environment }}/terraform.tfvars -var="image_tag=${{ inputs.image_tag }}" -var="ecs_switch=true" $tfargs | tee tfplan.txt || exitcode=$?
          echo "exitcode=${exitcode}"  # 0=clean plan, 1=error, 2=stuff in plan
          echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
          (( exitcode == 1 )) && exit 1 || exit 0

  create-container-apply:
    name: Apply for new container
    runs-on: ubuntu-latest
    needs: create-container-plan
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-cr-ancillary-jitbit-app-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ inputs.terraform_version }}"
          terraform_wrapper: false

      - name: Apply
        id: apply
        run: |
          set -e
          cd terraform
          terraform init -backend-config=environments/${{ inputs.environment }}/backend.hcl
          terraform apply -auto-approve -var-file=environments/${{ inputs.environment }}/terraform.tfvars -var="image_tag=${{ inputs.image_tag }}" -var="ecs_switch=true"

  manual-testing: #Â jitbit team checks their upgrade work at this point
    name: Wait for manual testing from jitbit team
    needs: create-container-apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Wait for approval
        run: echo "Waiting for approval" # change this

  health-check:
    name: Automated health check
    needs: manual-testing
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Run health check
        run: echo "Running health checks..."

  switch-traffic:
    name: Switch traffic to new deployment
    needs: health-check
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Update load balancer target group
        run: echo "Updating lb target group..."

  terminate-old: # need to depend on approval
    name: Terminate old container
    needs: switch-traffic
    runs-on: ubuntu-latest
    continue-on-error: true
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Terminate old container
        run: echo "Terminating old container instance..."

  rollback: # need to depend on approval
    name: Rollback to previous deployment
    needs: switch-traffic
    runs-on: ubuntu-latest
    continue-on-error: true
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Switch traffic back to previous deployment
        run: echo "Switching traffic to previous deployment..."
      - name: Verify rollback success
        run: echo "Confirming rollback has been completed..."
