name: "Reusable: Build push an image"
on:
  workflow_dispatch:
    inputs:
      jitbit_version:
        type: string
  workflow_call:
    inputs:
      jitbit_version:
        type: string
jobs:
  build-image:
    name: Build Image
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: "arn:aws:iam::${{ vars.IMG_BUILD_PUSH_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-cr-ancillary-jitbit-app-${{ github.run_number }}"
          aws-region: "eu-west-2"

      - name: Cache app files
        id: app-files
        uses: actions/cache@v4
        with:
          path: docker/app
          key: "${{ inputs.jitbit_version }}"

      - name: Pull down S3 app files if not cached
        if: steps.app-files.outputs.cache-hit != 'true'
        run: |
          aws s3 cp \
            s3://${{ secrets.MP_SOFTWARE_BUCKET }}/delius-jitbit/app/HelpDesk_${{ inputs.jitbit_version }} \
            docker/app  \
            --recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image and export
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          tags: delius-jitbit-ecr-repo:${{ github.run_id }}-${{ github.run_attempt }}
          outputs: type=docker,dest=/tmp/jitbit-image-${{ inputs.jitbit_version }}.tar
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jitbit-image-${{ inputs.jitbit_version }}
          path: /tmp/jitbit-image-${{ inputs.jitbit_version }}.tar
          retention-days: 1

  scan-image:
    name: Scan Image
    needs: build-image
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: jitbit-image-${{ inputs.jitbit_version }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/jitbit-image-${{ inputs.jitbit_version }}.tar

      - name: Trivy scan
        uses: aquasecurity/trivy-action@d710430a6722f083d3b36b8339ff66b32f22ee55
        with:
          format: 'sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          image-ref: 'delius-jitbit-ecr-repo:${{ github.run_id }}-${{ github.run_attempt }}'
          exit-code: '1'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: failure() # If Trivy found vulnerabilities
        with:
          sarif_file: 'trivy-results.sarif'
  
  push-image:
    name: Publish image
    needs: [build-image, scan-image]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump-version.outputs.new_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: jitbit-image-${{ inputs.jitbit_version }}
          path: /tmp

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: "arn:aws:iam::${{ vars.IMG_BUILD_PUSH_ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "hmpps-cr-ancillary-jitbit-app-${{ github.run_id }}-${{ github.run_attempt }}"
          aws-region: "eu-west-2"

      - name: Load image from artifact
        run: |
            docker load --input /tmp/jitbit-image-${{ inputs.jitbit_version }}.tar

      - name: Tag image with latest
        if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event.ref == 'refs/heads/main'
        run: |
            docker tag delius-jitbit-ecr-repo:${{ github.run_id }}-${{ github.run_attempt }} ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/delius-jitbit-ecr-repo:${{ inputs.jitbit_version }}-latest

      - name: Tag image with github run id and attempt
        run: | 
           docker tag delius-jitbit-ecr-repo:${{ github.run_id }}-${{ github.run_attempt }} ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/delius-jitbit-ecr-repo:${{ inputs.jitbit_version }}-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push images to ECR
        run: docker push --all-tags ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/delius-jitbit-ecr-repo

      - name: Output image tags created (run id)
        run: echo "${{ inputs.jitbit_version }}-${{ github.run_id }}-${{ github.run_attempt }}"

      - name: Output image tags created (latest)
        if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event.ref == 'refs/heads/main'
        run: echo "${{ inputs.jitbit_version }}-latest"